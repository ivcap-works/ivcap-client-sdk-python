:py:mod:`ivcap_client.artifact`
===============================

.. py:module:: ivcap_client.artifact


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ivcap_client.artifact.Artifact
   ivcap_client.artifact.ArtifactIter




.. py:class:: Artifact(id: str, ivcap: IVCAP, status: Optional[ivcap_client.models.artifact_status_rt.ArtifactStatusRT] = None)


   This class represents an artifact record
   stored at a particular IVCAP deployment

   .. py:property:: urn
      :type: str


   .. py:property:: status
      :type: ivcap_client.models.artifact_status_rt.ArtifactStatusRT


   .. py:property:: metadata
      :type: Iterator[ivcap_client.metadata.Metadata]


   .. py:method:: add_metadata(aspect: Dict[str, any], schema: Optional[str] = None) -> Artifact

      Add a metadata 'aspect' to this artifact. The 'schema' of the aspect, if not defined
      is expected to found in the 'aspect' under the '$schema' key.

      :param aspect: The aspect to be attached
      :type aspect: dict
      :param schema: Schema of the aspect. Defaults to 'aspect["$schema"]'.
      :type schema: Optional[str], optional

      :returns: To enable chaining
      :rtype: self


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: ArtifactIter(ivcap: IVCAP, **kwargs)


   .. py:method:: __iter__()


   .. py:method:: __next__()


   .. py:method:: _fill() -> List[ivcap_client.models.artifact_status_rt.ArtifactStatusRT]



