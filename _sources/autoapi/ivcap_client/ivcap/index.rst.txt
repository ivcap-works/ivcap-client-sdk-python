:py:mod:`ivcap_client.ivcap`
============================

.. py:module:: ivcap_client.ivcap


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ivcap_client.ivcap.IVCAP




.. py:class:: IVCAP(url: Optional[str] = None, token: Optional[str] = None, account_id: Optional[str] = None)


   A class to represent a particular IVCAP deployment and it's capabilities


   .. py:property:: url
      :type: str


   .. py:method:: list_services(filter: Optional[str] = None, order_by: Optional[str] = None, order_desc: Optional[bool] = False, at_time: Optional[datetime.datetime.datetime] = None) -> Iterator[ivcap_client.service.Service]

      Return an iterator over all the available services fulfilling certain constraints.

      :param filter Optional[str]: Allows clients to  filter a collection of
                                   resources that are addressed by a request URL. The expression specified with 'filter'
                                   is evaluated for each resource in the collection, and only items where the expression
                                   evaluates to true are included in the response.
                                   Example: filter=FirstName eq 'Scott'.. Defaults to None.
      :param order_by Optional[str]: _description_. Defaults to None.
      :param order_desc Optional[str]: When true sort in descending order otherwise use ascending order. Defaults to False (ascending).
      :param at_time Optional[datetime.datetime]: Return the list which would have been valid at this time. Defaults to 'Now'.

      :returns: An iterator over a list of services
      :rtype: Iterator[Service]

      :Yields: *Service* -- A Service object


   .. py:method:: get_service(service_id: str) -> ivcap_client.service.Service


   .. py:method:: list_orders(filter: Optional[str] = None, order_by: Optional[str] = None, order_desc: Optional[bool] = False, at_time: Optional[datetime.datetime.datetime] = None) -> Iterator[ivcap_client.order.Order]

      Return an iterator over all the available orders fulfilling certain constraints.

      :param filter Optional[str]: Allows clients to  filter a collection of
                                   resources that are addressed by a request URL. The expression specified with 'filter'
                                   is evaluated for each resource in the collection, and only items where the expression
                                   evaluates to true are included in the response.
                                   Example: filter=FirstName eq 'Scott'.. Defaults to None.
      :param order_by Optional[str]: _description_. Defaults to None.
      :param order_desc Optional[str]: When true sort in descending order otherwise use ascending order. Defaults to False (ascending).
      :param at_time Optional[datetime.datetime]: Return the list which would have been valid at this time. Defaults to 'Now'.

      :returns: An iterator over a list of orders
      :rtype: Iterator[Order]

      :Yields: *Order* -- An order object


   .. py:method:: get_order(id: str) -> ivcap_client.order.Order


   .. py:method:: add_metadata(entity: str, aspect: Dict[str, any], schema: Optional[str] = None, *, policy: Optional[ivcap_client.types.URN] = None) -> ivcap_client.metadata.Metadata

      Add a metadata 'aspect' to 'entity'. The 'schema' of the aspect, if not defined
      is expected to found in the 'aspect' under the '$schema' key.

      :param entity: URN of the entity to attach the aspect to
      :type entity: str
      :param aspect: The aspect to be attached
      :type aspect: dict
      :param schema: Schema of the aspect. Defaults to 'aspect["$schema"]'.
      :type schema: Optional[str], optional
      :param policy: Optional[URN]: Set specific policy controlling access ('urn:ivcap:policy:...').

      :returns: The created metadata record
      :rtype: metadata


   .. py:method:: search_metadata(*, entity: Optional[str] = None, schema_prefix: Optional[str] = None, aspect_path: Optional[str] = None, filter: Optional[str] = None, order_by: Optional[str] = None, order_desc: Optional[str] = None, at_time: Optional[datetime.datetime] = None) -> Iterator[ivcap_client.metadata.Metadata]

      Return an iterator over all the metadata records fulfilling certain constraints.

      :param entity Optional[str]: The entity URN for which to restrict the returend metadata records
      :param schema_prefix Optional[str]: A prefix (using Postgres 'like' patterns) to restrict the
                                          returend metadata records
      :param aspect_path: Optional[str]: When defined also return a specific sub tree of the record's aspect
      :param filter Optional[str]: Allows clients to  filter a collection of
                                   resources that are addressed by a request URL. The expression specified with 'filter'
                                   is evaluated for each resource in the collection, and only items where the expression
                                   evaluates to true are included in the response.
                                   Example: filter=FirstName eq 'Scott'.. Defaults to None.
      :param order_by Optional[str]: _description_. Defaults to None.
      :param order_desc Optional[str]: When true sort in descending order otherwise use ascending order. Defaults to False (ascending).
      :param at_time Optional[datetime.datetime]: Return the list which would have been valid at this time. Defaults to 'Now'.

      :returns: An iterator over a list of metadata records
      :rtype: Iterator[Metadata]

      :Yields: *Metadata* -- A metadata object


   .. py:method:: list_artifacts(filter: Optional[str] = None, order_by: Optional[str] = None, order_desc: Optional[bool] = False, at_time: Optional[datetime.datetime.datetime] = None) -> Iterator[ivcap_client.artifact.Artifact]

      Return an iterator over all the available artifacts fulfilling certain constraints.

      :param filter Optional[str]: Allows clients to  filter a collection of
                                   resources that are addressed by a request URL. The expression specified with 'filter'
                                   is evaluated for each resource in the collection, and only items where the expression
                                   evaluates to true are included in the response.
                                   Example: filter=FirstName eq 'Scott'.. Defaults to None.
      :param order_by Optional[str]: _description_. Defaults to None.
      :param order_desc Optional[str]: When true sort in descending order otherwise use ascending order. Defaults to False (ascending).
      :param at_time Optional[datetime.datetime]: Return the list which would have been valid at this time. Defaults to 'Now'.

      :returns: An iterator over a list of services
      :rtype: Iterator[Service]

      :Yields: *Artifact* -- An artifact object


   .. py:method:: upload_artifact(*, name: Optional[str] = None, file_path: Optional[str] = None, io_stream: Optional[IO] = None, content_type: Optional[str] = None, content_size: Optional[int] = -1, collection: Optional[ivcap_client.types.URN] = None, policy: Optional[ivcap_client.types.URN] = None, chunk_size: Optional[int] = MAXSIZE, retries: Optional[int] = 0, retry_delay: Optional[int] = 30) -> ivcap_client.artifact.Artifact

      Uploads content which is either identified as a `file_path` or `io_stream`. In the
      latter case, content type need to be provided.

      :param file_path: File to upload
      :type file_path: Optional[str]
      :param io_stream: Content as IO stream.
      :type io_stream: Optional[IO]
      :param content_type: Content type - needs to be declared for `io_stream`.
      :type content_type: Optional[str]
      :param content_size: Overall size of content to be uploaded. Defaults to -1 (don't know).
      :type content_size: Optional[int]
      :param collection: Optional[URN]: Additionally adds artifact to named collection ('urn:...').
      :param policy: Optional[URN]: Set specific policy controlling access ('urn:ivcap:policy:...').
      :param chunk_size: Chunk size to use for each individual upload. Defaults to MAXSIZE.
      :type chunk_size: Optional[int]
      :param retries: The number of attempts should be made in the case of a failed upload. Defaults to 0.
      :type retries: Optional[int]
      :param retry_delay: How long (in seconds) should we wait before retrying a failed upload attempt. Defaults to 30.
      :type retry_delay: Optional[int], optional


   .. py:method:: get_artifact(id: str) -> ivcap_client.artifact.Artifact


   .. py:method:: __repr__()

      Return repr(self).



