:py:mod:`ivcap_client.order`
============================

.. py:module:: ivcap_client.order


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ivcap_client.order.Order
   ivcap_client.order.OrderIter
   ivcap_client.order.OrderParameter




.. py:class:: Order(ivcap: ivcap_client.ivcap.IVCAP, **kwargs)


   This class represents a particular order placed
   at a particular IVCAP deployment

   .. py:property:: urn
      :type: str


   .. py:property:: parameters
      :type: Dict[str, ivcap_client.models.parameter_t.ParameterT]


   .. py:attribute:: id
      :type: str

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: service
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:attribute:: ordered_at
      :type: Optional[datetime.datetime.datetime]

      

   .. py:attribute:: started_at
      :type: Optional[datetime.datetime.datetime]

      

   .. py:attribute:: finished_at
      :type: Optional[datetime.datetime.datetime]

      

   .. py:attribute:: policy
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:attribute:: account
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:method:: _from_list_item(item: ivcap_client.models.order_list_item.OrderListItem, ivcap: ivcap_client.ivcap.IVCAP)
      :classmethod:


   .. py:method:: __update__(**kwargs)


   .. py:method:: status(refresh=True) -> ivcap_client.models.order_status_rt.OrderStatusRT


   .. py:method:: metadata() -> List[ivcap_client.aspect.Aspect]


   .. py:method:: add_metadata(aspect: Dict[str, any], schema: Optional[str] = None) -> Order

      Add a metadata 'aspect' to this order. The 'schema' of the aspect, if not defined
      is expected to found in the 'aspect' under the '$schema' key.

      :param aspect: The aspect to be attached
      :type aspect: dict
      :param schema: Schema of the aspect. Defaults to 'aspect["$schema"]'.
      :type schema: Optional[str], optional

      :returns: The metadata record created
      :rtype: metadata


   .. py:method:: _refresh()


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: OrderIter(ivcap: ivcap_client.ivcap.IVCAP, **kwargs)


   Bases: :py:obj:`ivcap_client.utils.BaseIter`\ [\ :py:obj:`Order`\ , :py:obj:`ivcap_client.models.order_list_item.OrderListItem`\ ]

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: _next_el(el) -> Order


   .. py:method:: _get_list() -> List[ivcap_client.models.order_list_item.OrderListItem]



.. py:class:: OrderParameter(p: ivcap_client.models.parameter_t.ParameterT)


   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: value
      :type: any

      


