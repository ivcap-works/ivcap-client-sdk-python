:py:mod:`ivcap_client.service`
==============================

.. py:module:: ivcap_client.service


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ivcap_client.service.Service
   ivcap_client.service.ServiceIter
   ivcap_client.service.PType
   ivcap_client.service.ServiceParameter
   ivcap_client.service.POption




Attributes
~~~~~~~~~~

.. autoapisummary::

   ivcap_client.service._verifier


.. py:class:: Service(ivcap: ivcap_client.ivcap.IVCAP, **kwargs)


   This clas represents a particular service available
   in a particular IVCAP deployment

   .. py:property:: parameters
      :type: Dict[str, ServiceParameter]


   .. py:property:: mandatory_parameters
      :type: Set[str]


   .. py:attribute:: id
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:attribute:: name
      :type: Optional[str]

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:attribute:: banner
      :type: Optional[str]

      

   .. py:attribute:: policy
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:attribute:: published_at
      :type: Optional[datetime.datetime]

      

   .. py:attribute:: policy
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:attribute:: account
      :type: Optional[ivcap_client.ivcap.URN]

      

   .. py:method:: _from_list_item(item: ivcap_client.models.service_list_item.ServiceListItem, ivcap: ivcap_client.ivcap.IVCAP)
      :classmethod:


   .. py:method:: __update__(**kwargs)


   .. py:method:: status(refresh=True) -> ivcap_client.models.service_status_rt_status.ServiceStatusRTStatus


   .. py:method:: place_order(**kwargs) -> ivcap_client.order.Order


   .. py:method:: refresh() -> Service


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: ServiceIter(ivcap: ivcap_client.ivcap.IVCAP, **kwargs)


   Bases: :py:obj:`ivcap_client.utils.BaseIter`\ [\ :py:obj:`Service`\ , :py:obj:`ivcap_client.models.service_list_item.ServiceListItem`\ ]

   Helper class that provides a standard way to create an ABC using
   inheritance.

   .. py:method:: _next_el(el) -> Service


   .. py:method:: _get_list() -> List[ivcap_client.models.service_list_item.ServiceListItem]



.. py:class:: PType


   Bases: :py:obj:`enum.Enum`

   Generic enumeration.

   Derive from this class to define new enumerations.

   .. py:attribute:: STRING
      :value: 'string'

      

   .. py:attribute:: INT
      :value: 'int'

      

   .. py:attribute:: FLOAT
      :value: 'float'

      

   .. py:attribute:: BOOL
      :value: 'bool'

      

   .. py:attribute:: OPTION
      :value: 'option'

      

   .. py:attribute:: ARTIFACT
      :value: 'artifact'

      

   .. py:attribute:: COLLECTION
      :value: 'collection'

      


.. py:data:: _verifier

   

.. py:class:: ServiceParameter(p: ivcap_client.models.parameter_def_t.ParameterDefT)


   .. py:attribute:: name
      :type: str

      

   .. py:attribute:: type
      :type: PType

      

   .. py:attribute:: description
      :type: str

      

   .. py:attribute:: label
      :type: Optional[str]

      

   .. py:attribute:: unit
      :type: Optional[str]

      

   .. py:attribute:: is_constant
      :type: Optional[bool]
      :value: False

      

   .. py:attribute:: is_unary
      :type: Optional[bool]
      :value: False

      

   .. py:attribute:: is_optional
      :type: Optional[bool]
      :value: False

      

   .. py:attribute:: default
      :type: Optional[str]

      

   .. py:attribute:: options
      :type: Optional[List[ivcap_client.models.parameter_opt_t.ParameterOptT]]

      

   .. py:method:: verify(value: Any)

      Verify if value is within the constraints and types defined
      for this parameter


   .. py:method:: _verify_option(value: Any) -> bool


   .. py:method:: _verify_artifact(v: Any) -> bool


   .. py:method:: _verify_collection(v: Any) -> bool


   .. py:method:: __repr__()

      Return repr(self).



.. py:class:: POption(p: ivcap_client.models.parameter_opt_t.ParameterOptT)


   .. py:attribute:: value
      :type: str

      

   .. py:attribute:: description
      :type: Optional[str]

      

   .. py:method:: __repr__()

      Return repr(self).



